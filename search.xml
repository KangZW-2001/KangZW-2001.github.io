<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一篇博客</title>
    <url>/2020/12/25/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="使图片正常显示"><a href="#使图片正常显示" class="headerlink" title="使图片正常显示"></a>使图片正常显示</h3><p>使用 <strong>! [] (在这里输入图片在同名文件夹下的名字即可)</strong></p>
<p>注意上述的 <strong>!</strong> 和 <strong>[]</strong> 和 <strong>()</strong> 是相连的，中间没有空格，且显示的时候在 Typora 中可能无法正常显示，但是在网页中是可以正常显示的。 </p>
<hr>
<h3 id="常用的hexo命令"><a href="#常用的hexo命令" class="headerlink" title="常用的hexo命令"></a>常用的hexo命令</h3><a id="more"></a>

<p><code>hexo new page categories</code> 会创建一个新的分类</p>
<p><code>hexo new page tags</code> 会创建一个新的标签</p>
<p><code>hexo new &quot;文章名称&quot;</code> 会创建一个新 md 文件（附带一个文件夹用来存放资源）</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot读取Excel</title>
    <url>/2021/01/24/SpringBoot%E8%AF%BB%E5%8F%96Excel/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Canny算法</title>
    <url>/2021/03/31/Canny%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>​        Canny边缘检测算子是John F. Canny在1986年开发出来的一个多级边缘检测算法，更为重要的是Canny创立了“<strong>边缘检测计算理论</strong>”解释这项技术如何工作。</p>
<h3 id="最优边缘准则"><a href="#最优边缘准则" class="headerlink" title="最优边缘准则"></a>最优边缘准则</h3><p>​        Canny的目标是找到一个最优的边缘检测算法，最优边缘检测的含义是：</p>
<ol>
<li><p>最优检测：算法能够尽可能多地标识出图像中的实际边缘，漏检真实边缘的概率和误检非边缘的概率都尽可能小；</p>
</li>
<li><p>最优定位准则：检测到的边缘点的位置距离实际边缘点的位置最近，或者是由于噪声影响引起检测出的边缘偏离物体的真实边缘的程度最小；</p>
</li>
<li><p>检测点与边缘点一一对应：算子检测的边缘点与实际边缘点应该是一一对应。</p>
<p>为了满足这些要求 Canny 使用了变分法（calculus of variations），这是一种寻找优化特定功能的函数的方法。最优检测使用四个指数函数项表示，但是它非常近似于高斯函数的一阶导数。</p>
</li>
</ol>
<h3 id="算法的实现步骤"><a href="#算法的实现步骤" class="headerlink" title="算法的实现步骤"></a>算法的实现步骤</h3><p>​        Canny边缘检测算法可以分为以下5个步骤：</p>
<ol>
<li>应用高斯滤波来平滑图像，目的是去除噪声。</li>
<li>找寻图像的强度梯度（intensity gradients）和方向。</li>
<li>应用非最大抑制（non-maximum suppression）技术来消除边误检（本来不是但检测出来是）。</li>
<li>应用双阈值的方法来决定可能的（潜在的）边界。</li>
<li>利用滞后技术来跟踪边界。</li>
</ol>
<h3 id="算法的具体实现步骤"><a href="#算法的具体实现步骤" class="headerlink" title="算法的具体实现步骤"></a>算法的具体实现步骤</h3><ol>
<li><p>高斯滤波</p>
<p>这一步较为简单，不在此过于赘述。</p>
<ol start="2">
<li>计算梯度幅度和方向</li>
</ol>
<p>图像的边缘可以指向不同方向，因此Canny算法用了四个梯度算子来计算水平、垂直和对角线方向的梯度。但是通常都不用四个梯度算子来分别计算四个方向。常用的边缘差分算子（如Rober，Prewitt，Sobel）计算水平和垂直方向的差分Gx和Gy。这样就可以如下计算梯度模和方向：</p>
<p><img src="/../images/Canny%E7%AE%97%E6%B3%95/1095344-20170213171940019-134049094.jpg" alt="img"></p>
<p>梯度角度θ范围从弧度-π到π，然后把它近似到四个方向，分别代表水平，垂直和两个对角线方向（0°,45°,90°,135°）。可以以±iπ/8（i=1,3,5,7）分割，落在每个区域的梯度角给一个特定值，代表四个方向之一。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv-1</title>
    <url>/2021/03/18/opencv-1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>可视化实验1</title>
    <url>/2021/04/12/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%9E%E9%AA%8C1/</url>
    <content><![CDATA[<h2 id="可视化实验1"><a href="#可视化实验1" class="headerlink" title="可视化实验1"></a>可视化实验1</h2><h4 id="交互技术"><a href="#交互技术" class="headerlink" title="交互技术"></a>交互技术</h4><p>原始数据—-&gt;抽象数据—-&gt;可视化形式 —–&gt;展现（用户交互）</p>
<p>可视化和可视分析，契合现在人工智能发展方向。</p>
<p>如何把专家的经验和机器结合起来。</p>
<p>常见交互方式：</p>
<pre><code> 1. 交互方式1：概览+细节
 2. 交互方式2：焦点+上下文</code></pre>
<p>选择、导航、重配、编码、抽象（具象）、过滤、关联</p>
<ol>
<li>选择<br>使用鼠标点击、鼠标悬停显示提示框（由粗到细的一个探索过程）</li>
<li>导航<br>直接引导，对于复杂的导航栏，使用拖拽和缩放。</li>
<li>重配<br>改变可视化的空间布局以提供不同的视角。（<strong>数据本身不会发生变化</strong>）</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>光流法</title>
    <url>/2021/04/02/%E5%85%89%E6%B5%81%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><h4 id="什么是光流？"><a href="#什么是光流？" class="headerlink" title="什么是光流？"></a>什么是光流？</h4><p>​    光流是空间运动物体在观察成像平面上像素运动的瞬时速度。<br>​    光流法是利用图像序列中像素在时间域上的变化以及相邻帧之间的相关性来找到上一帧跟当前帧之间存在的对应关系，从而计算出相邻帧之间物体运动信息的一种方法。<br>​    通常将二维图像平面特定坐标点上的<strong>灰度瞬时变化率</strong>定义为光流矢量。</p>
<p>​    <em>所谓光流就是瞬时速率，在时间间隔很小时（视频的前后两帧之间），等同于目标点的位移</em></p>
<h4 id="光流的物理意义"><a href="#光流的物理意义" class="headerlink" title="光流的物理意义"></a>光流的物理意义</h4><p>​    一般而言，光流是由于场景中前景目标本身的运动、相机的运动，或者两者的共同运动所产生的。<br>​    当人的眼睛观察运动物体时，物体的景象在人眼的视网膜上形成一系列连续变化的图像，这一系列连续变化的信息不断“流过”视网膜（即图像平面），好像一种光的“流”，故称之为光流。光流表达了图像的变化，由于它包含了目标运动的信息，因此可被观察者用来确定目标的运动情况。</p>
<h4 id="光流场"><a href="#光流场" class="headerlink" title="光流场"></a>光流场</h4><p>​    在空间中，运动可以用运动场描述，而在一个图像平面上，物体的运动往往是通过图像序列中不同图像灰度分布的不同体现的，从而，空间中的运动场转移到图像上就表示为光流场（optical flow field）。<br>​    光流场是一个二维矢量场，它反映了图像上每一点的灰度变化趋势，可看成是带有灰度的像素点在图像平面上运动而产生的瞬时速度场。它包含的信息即是各像点的瞬时运动速度矢量信息。<br>​    研究光流场的目的是为了从图像序列中近似计算不能直接得到的运动场。光流场在理想情况下，对应于运动场。<br>​    简单概括为：<br>​    <em>1. 所谓光流场就是很多光流的集合</em><br>​    <em>2. 当我们计算出了一幅图片中每个图像的光流，就能形成光流场</em><br>​    <em>3. 构建光流场是试图重现现实世界中的运动场，用于运动分析</em></p>
<h2 id="2-光流法基本原理"><a href="#2-光流法基本原理" class="headerlink" title="2.光流法基本原理"></a>2.光流法基本原理</h2><h4 id="基本假设条件"><a href="#基本假设条件" class="headerlink" title="基本假设条件"></a>基本假设条件</h4><pre><code>* *亮度恒定不变*，即同一目标在不同帧间运动时，其亮度不会发生改变。这是基本光流法的假定（所有光流法变种都必须满足），用于得到光流法基本方程；
* *时间连续或运动是“小运动”*。即时间的变化不会引起目标位置的剧烈变化，相邻帧之间位移要比较小。同样也是光流法不可或缺的假定。</code></pre>
<h4 id="基本约束方程"><a href="#基本约束方程" class="headerlink" title="基本约束方程"></a>基本约束方程</h4>]]></content>
      <tags>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>将springboot项目部署到阿里云服务器上</title>
    <url>/2021/02/04/%E5%B0%86springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
    <content><![CDATA[<h3 id="将项目打包成-jar包"><a href="#将项目打包成-jar包" class="headerlink" title="将项目打包成.jar包"></a>将项目打包成.jar包</h3><p>在springboot中项目右键 <strong>Run as</strong> 选择 <strong>Maven  install</strong> 即可在下方target文件夹中生成jar文件。</p>
<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
